// a library to wrap and simplify api calls
import apisauce from 'apisauce'
<%_ if (props.authType === 'session' || props.authType === 'uaa') { _%>
import CookieManager from 'react-native-cookies'
<%_ } _%>

import AppConfig from '../../config/app-config'

// our "constructor"
const create = (baseURL = AppConfig.apiUrl) => {
  // ------
  // STEP 1
  // ------
  //
  // Create and configure an apisauce-based api object.
  //
  const api = apisauce.create({
    // base URL is read from the "constructor"
    baseURL,
    // here are some default headers
    headers: {
      'Cache-Control': 'no-cache'
    },
    // 10 second timeout...
    timeout: 10000
  })
  <%_ if (props.authType === 'session' || props.authType === 'uaa') { _%>
  api.addAsyncRequestTransform(request => async (request) => {
    const cookies = await CookieManager.get(baseURL)
    if (cookies['XSRF-TOKEN']) {
      request.headers['X-XSRF-TOKEN'] = cookies['XSRF-TOKEN']
    }
    return request
  })
  <%_ } _%>

  // ------
  // STEP 2
  // ------
  //
  // Define some functions that call the api.  The goal is to provide
  // a thin wrapper of the api layer providing nicer feeling functions
  // rather than "get", "post" and friends.
  //
  // I generally don't like wrapping the output at this level because
  // sometimes specific actions need to be take on `403` or `401`, etc.
  //
  // Since we can't hide from that, we embrace it by getting out of the
  // way at this level.
  //
  <%_ if (props.authType === 'jwt' || props.authType === 'oauth2') { _%>
  const setAuthToken = (userAuth) => api.setHeader('Authorization', 'Bearer ' + userAuth)
  const removeAuthToken = () => api.deleteHeader('Authorization')
  <%_ } _%>
  <%_ if (props.authType === 'oauth2') { _%>
  const getOauthInfo = () => api.get('api/auth-info')
  const getOauthIssuerInfo = (issuerUrl) => api.get(`${issuerUrl}/.well-known/openid-configuration`)
  <%_ } else if (props.authType === 'session') { _%>
  const login = (userAuth) => api.post('api/authentication', userAuth, { headers: { 'Content-Type': 'application/x-www-form-urlencoded', 'Accept': 'application/json, text/plain, */*' } })
  const logout = () => api.post('api/logout')
  <%_ } else if (props.authType === 'jwt') { _%>
  const login = (userAuth) => api.post('api/authenticate', userAuth)
  <%_ } else if (props.authType === 'uaa') { _%>
  const login = (userAuth) => api.post('auth/login', userAuth)
  const logout = () => api.post('auth/logout')
  <%_ } _%>
  const register = (user) => api.post(<% if (props.authType === 'uaa') { %>AppConfig.uaaBaseUrl + <% } %>'api/register', user)
  const forgotPassword = (data) => api.post(<% if (props.authType === 'uaa') { %>AppConfig.uaaBaseUrl + <% } %>'api/account/reset-password/init', data, { headers: { 'Content-Type': 'text/plain', 'Accept': 'application/json, text/plain, */*' } })

  const getAccount = () => api.get(<% if (props.authType === 'uaa') { %>AppConfig.uaaBaseUrl + <% } %>'api/account')
  const updateAccount = (account) => api.post(<% if (props.authType === 'uaa') { %>AppConfig.uaaBaseUrl + <% } %>'api/account', account)
  const changePassword = (currentPassword, newPassword) => api.post(<% if (props.authType === 'uaa') { %>AppConfig.uaaBaseUrl + <% } %>'api/account/change-password', { currentPassword, newPassword }, { headers: { 'Content-Type': 'application/json', 'Accept': 'application/json, text/plain, */*' } })

  const getUser = (userId) => api.get('api/users/' + userId)
  const getUsers = (options) => api.get('api/users', options)
  const createUser = (user) => api.post('api/users', user)
  const updateUser = (user) => api.put('api/users', user)
  const deleteUser = (userId) => api.delete('api/users/' + userId)
  // ignite-jhipster-api-method-needle

  // ------
  // STEP 3
  // ------
  //
  // Return back a collection of functions that we would consider our
  // interface.  Most of the time it'll be just the list of all the
  // methods in step 2.
  //
  // Notice we're not returning back the `api` created in step 1?  That's
  // because it is scoped privately.  This is one way to create truly
  // private scoped goodies in JavaScript.
  //
  return {
    // a list of the API functions from step 2
    createUser,
    updateUser,
    getUsers,
    getUser,
    deleteUser,
    // ignite-jhipster-api-export-needle
    <%_ if (props.authType === 'session' || props.authType === 'uaa') { _%>
    logout,
    <%_ } else { _%>
    setAuthToken,
    removeAuthToken,
    <%_ } _%>
    <%_ if (props.authType === 'oauth2') { _%>
    getOauthInfo,
    getOauthIssuerInfo,
    <%_ } else { _%>
    login,
    <%_ } _%>
    register,
    forgotPassword,
    getAccount,
    updateAccount,
    changePassword
  }
}

// let's return back our create method as the default.
export default {
  create
}
