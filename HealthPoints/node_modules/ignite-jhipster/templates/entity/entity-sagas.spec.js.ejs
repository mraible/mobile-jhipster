import { put } from 'redux-saga/effects'

import FixtureAPI from '../../../../../app/shared/services/fixture-api'
import { get<%= props.name %>, get<%= props.pluralName %>, update<%= props.name %>, delete<%= props.name %><%= props.searchEngine ? `, search${props.pluralName}` : '' %> } from '../../../../../app/modules/entities/<%= props.kebabName %>/<%= props.kebabName %>.sagas'
import <%= props.name %>Actions from '../../../../../app/modules/entities/<%= props.kebabName %>/<%= props.kebabName %>.reducer'

const stepper = (fn) => (mock) => fn.next(mock).value

test('get success path', () => {
  const response = FixtureAPI.get<%= props.name %>(1)
  const step = stepper(get<%= props.name %>(FixtureAPI, { <%= camelCase(props.name) %>Id: { id: 1 } }))
  // Step 1: Hit the api
  step()
  // Step 2: Successful return and data!
  expect(step(response)).toEqual(put(<%= props.name %>Actions.<%= camelCase(props.name) %>Success({ id: 1 })))
})

test('get failure path', () => {
  const response = { ok: false }
  const step = stepper(get<%= props.name %>(FixtureAPI, { <%= camelCase(props.name) %>Id: { id: 1 } }))
  // Step 1: Hit the api
  step()
  // Step 2: Failed response.
  expect(step(response)).toEqual(put(<%= props.name %>Actions.<%= camelCase(props.name) %>Failure()))
})

test('getAll success path', () => {
  const response = FixtureAPI.get<%= props.pluralName %>()
  const step = stepper(get<%= props.pluralName %>(FixtureAPI, { options: { page: 0, sort: 'id,asc', size: 20 } }))
  // Step 1: Hit the api
  step()
  // Step 2: Successful return and data!
  expect(step(response)).toEqual(put(<%= props.name %>Actions.<%= camelCase(props.name) %>AllSuccess([{ id: 1 }, { id: 2 }])))
})

test('getAll failure path', () => {
  const response = { ok: false }
  const step = stepper(get<%= props.pluralName %>(FixtureAPI, { options: { page: 0, sort: 'id,asc', size: 20 } }))
  // Step 1: Hit the api
  step()
  // Step 2: Failed response.
  expect(step(response)).toEqual(put(<%= props.name %>Actions.<%= camelCase(props.name) %>AllFailure()))
})

test('update success path', () => {
  const response = FixtureAPI.update<%= props.name %>({ id: 1 })
  const step = stepper(update<%= props.name %>(FixtureAPI, { <%= camelCase(props.name) %>: { id: 1 } }))
  // Step 1: Hit the api
  step()
  // Step 2: Successful return and data!
  expect(step(response)).toEqual(put(<%= props.name %>Actions.<%= camelCase(props.name) %>UpdateSuccess({ id: 1 })))
})

test('update failure path', () => {
  const response = { ok: false }
  const step = stepper(update<%= props.name %>(FixtureAPI, { <%= camelCase(props.name) %>: { id: 1 } }))
  // Step 1: Hit the api
  step()
  // Step 2: Failed response.
  expect(step(response)).toEqual(put(<%= props.name %>Actions.<%= camelCase(props.name) %>UpdateFailure()))
})

<%_ if (props.searchEngine) { _%>
test('search success path', () => {
  const response = FixtureAPI.search<%= props.pluralName %>()
  const step = stepper(search<%= props.pluralName %>(FixtureAPI, '*'))
  // Step 1: Hit the api
  step()
  // Step 2: Successful return and data!
  expect(step(response)).toEqual(put(<%= props.name %>Actions.<%= camelCase(props.name) %>SearchSuccess([{ id: 1 }, { id: 2 }])))
})

test('search failure path', () => {
  const response = { ok: false }
  const step = stepper(search<%= props.pluralName %>(FixtureAPI, '*'))
  // Step 1: Hit the api
  step()
  // Step 2: Failed response.
  expect(step(response)).toEqual(put(<%= props.name %>Actions.<%= camelCase(props.name) %>SearchFailure()))
})
<%_ } _%>
test('delete success path', () => {
  const response = FixtureAPI.delete<%= props.name %>({ id: 1 })
  const step = stepper(delete<%= props.name %>(FixtureAPI, { <%= camelCase(props.name) %>Id: { id: 1 } }))
  // Step 1: Hit the api
  step()
  // Step 2: Successful return and data!
  expect(step(response)).toEqual(put(<%= props.name %>Actions.<%= camelCase(props.name) %>DeleteSuccess({ id: 1 })))
})

test('delete failure path', () => {
  const response = { ok: false }
  const step = stepper(delete<%= props.name %>(FixtureAPI, { <%= camelCase(props.name) %>Id: { id: 1 } }))
  // Step 1: Hit the api
  step()
  // Step 2: Failed response.
  expect(step(response)).toEqual(put(<%= props.name %>Actions.<%= camelCase(props.name) %>DeleteFailure()))
})
