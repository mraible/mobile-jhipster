import { createReducer, createActions } from 'reduxsauce'
import Immutable from 'seamless-immutable'

/* ------------- Types and Action Creators ------------- */

const { Types, Creators } = createActions({
  <%= camelCase(props.name) %>Request: ['<%= camelCase(props.name) %>Id'],
  <%= camelCase(props.name) %>AllRequest: ['options'],
  <%= camelCase(props.name) %>UpdateRequest: ['<%= camelCase(props.name) %>'],
  <%_ if (props.searchEngine) { _%>
  <%= camelCase(props.name) %>SearchRequest: ['query'],
  <%_ } _%>
  <%= camelCase(props.name) %>DeleteRequest: ['<%= camelCase(props.name) %>Id'],

  <%= camelCase(props.name) %>Success: ['<%= camelCase(props.name) %>'],
  <%= camelCase(props.name) %>AllSuccess: ['<%= camelCase(props.pluralName) %>'],
  <%= camelCase(props.name) %>UpdateSuccess: ['<%= camelCase(props.name) %>'],
  <%_ if (props.searchEngine) { _%>
  <%= camelCase(props.name) %>SearchSuccess: ['<%= camelCase(props.pluralName) %>'],
  <%_ } _%>
  <%= camelCase(props.name) %>DeleteSuccess: [],

  <%= camelCase(props.name) %>Failure: ['error'],
  <%= camelCase(props.name) %>AllFailure: ['error'],
  <%= camelCase(props.name) %>UpdateFailure: ['error'],
  <%_ if (props.searchEngine) { _%>
  <%= camelCase(props.name) %>SearchFailure: ['error'],
  <%_ } _%>
  <%= camelCase(props.name) %>DeleteFailure: ['error']
})

export const <%= props.name %>Types = Types
export default Creators

/* ------------- Initial State ------------- */

export const INITIAL_STATE = Immutable({
  fetchingOne: null,
  fetchingAll: null,
  updating: null,
  <%_ if (props.searchEngine) { _%>
  searching: null,
  <%_ } _%>
  deleting: null,
  <%= camelCase(props.name) %>: null,
  <%= camelCase(props.pluralName) %>: [],
  errorOne: null,
  errorAll: null,
  errorUpdating: null,
  <%_ if (props.searchEngine) { _%>
  errorSearching: null,
  <%_ } _%>
  errorDeleting: null
})

/* ------------- Reducers ------------- */

// request the data from an api
export const request = (state) =>
  state.merge({
    fetchingOne: true,
    <%= camelCase(props.name) %>: null
  })

// request the data from an api
export const allRequest = (state) =>
  state.merge({
    fetchingAll: true,
    <%= camelCase(props.pluralName) %>: []
  })

// request to update from an api
export const updateRequest = (state) =>
  state.merge({
    updating: true
  })
<%_ if (props.searchEngine) { _%>
// request to search from an api
export const searchRequest = (state) =>
  state.merge({
    searching: true
  })
<%_ } _%>
// request to delete from an api
export const deleteRequest = (state) =>
  state.merge({
    deleting: true
  })

// successful api lookup for single entity
export const success = (state, action) => {
  const { <%= camelCase(props.name) %> } = action
  return state.merge({
    fetchingOne: false,
    errorOne: null,
    <%= camelCase(props.name) %>
  })
}
// successful api lookup for all entities
export const allSuccess = (state, action) => {
  const { <%= camelCase(props.pluralName) %> } = action
  return state.merge({
    fetchingAll: false,
    errorAll: null,
    <%= camelCase(props.pluralName) %>
  })
}
// successful api update
export const updateSuccess = (state, action) => {
  const { <%= camelCase(props.name) %> } = action
  return state.merge({
    updating: false,
    errorUpdating: null,
    <%= camelCase(props.name) %>
  })
}
<%_ if (props.searchEngine) { _%>
// successful api search
export const searchSuccess = (state, action) => {
  const { <%= camelCase(props.pluralName) %> } = action
  return state.merge({
    searching: false,
    errorSearching: null,
    <%= camelCase(props.pluralName) %>
  })
}
<%_ } _%>
// successful api delete
export const deleteSuccess = (state) => {
  return state.merge({
    deleting: false,
    errorDeleting: null,
    <%= camelCase(props.name) %>: null
  })
}

// Something went wrong fetching a single entity.
export const failure = (state, action) => {
  const { error } = action
  return state.merge({
    fetchingOne: false,
    errorOne: error,
    <%= camelCase(props.name) %>: null
  })
}
// Something went wrong fetching all entities.
export const allFailure = (state, action) => {
  const { error } = action
  return state.merge({
    fetchingAll: false,
    errorAll: error,
    <%= camelCase(props.pluralName) %>: []
  })
}
// Something went wrong updating.
export const updateFailure = (state, action) => {
  const { error } = action
  return state.merge({
    updating: false,
    errorUpdating: error,
    <%= camelCase(props.name) %>: state.<%= camelCase(props.name) %>
  })
}
// Something went wrong deleting.
export const deleteFailure = (state, action) => {
  const { error } = action
  return state.merge({
    deleting: false,
    errorDeleting: error,
    <%= camelCase(props.name) %>: state.<%= camelCase(props.name) %>
  })
}
<%_ if (props.searchEngine) { _%>
// Something went wrong searching the entities.
export const searchFailure = (state, action) => {
  const { error } = action
  return state.merge({
    searching: false,
    errorSearching: error,
    <%= camelCase(props.pluralName) %>: []
  })
}
<%_ } _%>

/* ------------- Hookup Reducers To Types ------------- */

export const reducer = createReducer(INITIAL_STATE, {
  [Types.<%= snakeCase(props.name).toUpperCase() %>_REQUEST]: request,
  [Types.<%= snakeCase(props.name).toUpperCase() %>_ALL_REQUEST]: allRequest,
  [Types.<%= snakeCase(props.name).toUpperCase() %>_UPDATE_REQUEST]: updateRequest,
  <%_ if (props.searchEngine) { _%>
  [Types.<%= snakeCase(props.name).toUpperCase() %>_SEARCH_REQUEST]: searchRequest,
  <%_ } _%>
  [Types.<%= snakeCase(props.name).toUpperCase() %>_DELETE_REQUEST]: deleteRequest,

  [Types.<%= snakeCase(props.name).toUpperCase() %>_SUCCESS]: success,
  [Types.<%= snakeCase(props.name).toUpperCase() %>_ALL_SUCCESS]: allSuccess,
  [Types.<%= snakeCase(props.name).toUpperCase() %>_UPDATE_SUCCESS]: updateSuccess,
  <%_ if (props.searchEngine) { _%>
  [Types.<%= snakeCase(props.name).toUpperCase() %>_SEARCH_SUCCESS]: searchSuccess,
  <%_ } _%>
  [Types.<%= snakeCase(props.name).toUpperCase() %>_DELETE_SUCCESS]: deleteSuccess,

  [Types.<%= snakeCase(props.name).toUpperCase() %>_FAILURE]: failure,
  [Types.<%= snakeCase(props.name).toUpperCase() %>_ALL_FAILURE]: allFailure,
  [Types.<%= snakeCase(props.name).toUpperCase() %>_UPDATE_FAILURE]: updateFailure,
  <%_ if (props.searchEngine) { _%>
  [Types.<%= snakeCase(props.name).toUpperCase() %>_SEARCH_FAILURE]: searchFailure,
  <%_ } _%>
  [Types.<%= snakeCase(props.name).toUpperCase() %>_DELETE_FAILURE]: deleteFailure
})
