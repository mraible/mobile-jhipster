import React from 'react'
import { Alert, ScrollView, Text, TouchableHighlight, View } from 'react-native'
import { connect } from 'react-redux'
import <%= props.name %>Actions from './<%= props.kebabName %>.reducer'
<%_ props.entityConfig.uniqueOwnerSideRelationships.filter(relation => relation.otherEntityName !== camelCase(props.name)).forEach((relation) => { _%>
<%_ if (relation.otherEntityName === 'user') { _%>
import UserActions from '../../../shared/reducers/user.reducer'
<%_ } else { _%>
import <%= pascalCase(relation.otherEntityName) %>Actions from '../<%= kebabCase(relation.otherEntityName) %>/<%= kebabCase(relation.otherEntityName) %>.reducer'
<%_ } _%>
<%_ }) _%>
import { Navigation } from 'react-native-navigation'
import { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view'
<%_ if (props.entityContainsLocalDate) { _%>
import { jsDateToLocalDate } from '../../../shared/util/date-transforms'
<%_ } _%>
import { <%= camelCase(props.name) %>EntityDetailScreen } from '../../../navigation/layouts'

import t from 'tcomb-form-native'

import styles from './<%= props.kebabName %>-entity-edit-screen-style'

let Form = t.form.Form
<%_ props.entityConfig.fields.forEach((field) => {
  if (field.fieldIsEnum) { _%>
const <%= field.fieldType %> = t.enums({
<%_
    const enumValues = field.fieldValues.split(',')
    enumValues.forEach((enumValue, index) => {
_%>
  <%= enumValue %>: '<%= enumValue %>'<%= index !== enumValues.length -1 ? ',' : '' %>
<%_ }) //end of value loop _%>
})
<%_ } // end of if statement
}) // end of field loop _%>

class <%= props.name %>EntityEditScreen extends React.Component {
  constructor (props) {
    super(props)
    Navigation.events().bindComponent(this)
    this.state = {
      formModel: t.struct({
        id: t.maybe(t.Number),
        <%_ props.entityConfig.fields.forEach((field, index) => { _%>
        <%= props.getEntityFormField(field, index, props.entityConfig.fields.length, props.entityConfig.ownerSideRelationships.length) %>
        <%_ }) _%>
        <%_ props.entityConfig.ownerSideRelationships.forEach((relation, index) => { _%>
        <%= props.getRelationshipFormField(relation, index, props.entityConfig.ownerSideRelationships.length, props) %>
        <%_ }) _%>
      }),
      formValue: { id: null },
      formOptions: {
        fields: {
          id: {
            hidden: true
          },
          <%_ props.entityConfig.ownerSideRelationships.forEach((relation) => { _%>
          <%= relation.otherEntityName %>Id: {
            testID: '<%= relation.otherEntityName %>IdInput',
            label: '<%= pascalCase(relation.relationshipName) %>'
          },
          <%_ }) _%>
          <%_ props.entityConfig.fields.forEach((field, index) => {
              let nextFieldName = null
              if (index !== props.entityConfig.fields.length - 1) {
                nextFieldName = props.entityConfig.fields[index + 1].fieldName
              }
            _%>
          <%= field.fieldName %>: {
            <%_ if (field.fieldType === 'LocalDate') { _%>
            mode: 'date',
            config: {
              format: date => jsDateToLocalDate(date)
            },
            <%_ } _%>
            <%_ if (nextFieldName) { _%>
            returnKeyType: 'next',
            onSubmitEditing: () => this.form.getComponent('<%= nextFieldName %>').refs.input.focus(),
            <%_ } else if (props.entityConfig.ownerSideRelationships.length === 0) { _%>
            returnKeyType: 'done',
            onSubmitEditing: () => this.submitForm(),
          <%_ } _%>
            testID: '<%= field.fieldName %>Input'
          }<%= (index === props.entityConfig.fields.length - 1) ? '' : ',' %>
          <%_ }) // end entity field loop _%>
        }
      },
      <%= camelCase(props.name) %>: {},
      isNewEntity: true
    }
    if (props.data && props.data.entityId) {
      this.state.isNewEntity = false
      this.props.get<%= props.name %>(props.data.entityId)
    }
  <%_ props.entityConfig.ownerSideRelationships.forEach((relation) => { _%>
    this.props.getAll<%= pascalCase(relation.otherEntityNamePlural) %>()
  <%_ }) _%>

    this.submitForm = this.submitForm.bind(this)
    this.formChange = this.formChange.bind(this)
  }

  static getDerivedStateFromProps(nextProps, prevState){
    if (nextProps.<%= camelCase(props.name) %> !== prevState.<%= camelCase(props.name) %> && !prevState.isNewEntity) {
      return { formValue: entityToFormValue(nextProps.<%= camelCase(props.name) %>), <%= camelCase(props.name) %>: nextProps.<%= camelCase(props.name) %> }
    }
    return null
  }
  componentDidUpdate (prevProps) {
    if (prevProps.updating && !this.props.updating) {
      if (this.props.error) {
        Alert.alert('Error', 'Something went wrong updating the entity', [{ text: 'OK' }])
      } else {
        this.props.getAll<%= props.pluralName %>({ page: 0, sort: 'id,asc', size: 20 })
        const entityId = this.props.<%= camelCase(props.name) %>.id
        const alertOptions = [{ text: 'OK' }]
        if (!this.state.formValue.id) {
          alertOptions.push({
            text: 'View',
            onPress: <%= camelCase(props.name) %>EntityDetailScreen.bind(this, { entityId })
          })
        }
        Navigation.pop(this.props.componentId)
        Alert.alert('Success', 'Entity saved successfully', alertOptions)
      }
    }
  }

<%_ props.entityConfig.ownerSideRelationships.forEach((relation, index) => { _%>
  get<%= pascalCase(relation.otherEntityNamePlural) %> = () => {
    const <%= camelCase(relation.otherEntityNamePlural) %> = {}
    this.props.<%= camelCase(relation.otherEntityNamePlural) %>.forEach(<%= camelCase(relation.otherEntityName) %> => {
      <%= camelCase(relation.otherEntityNamePlural) %>[<%= camelCase(relation.otherEntityName) %>.id] = <%= camelCase(relation.otherEntityName) %>.<%= relation.otherEntityField || 'id' %> ? <%= camelCase(relation.otherEntityName) %>.<%= relation.otherEntityField || 'id' %>.toString() : <%= camelCase(relation.otherEntityName) %>.id.toString()
    })
    return t.maybe(t.enums(<%= relation.otherEntityNamePlural %>))
  }
<%_ }) _%>
  submitForm () {
    // call getValue() to get the values of the form
    const <%= camelCase(props.name) %> = this.form.getValue()
    if (<%= camelCase(props.name) %>) { // if validation fails, value will be null
      this.props.update<%= props.name %>(formValueToEntity(<%= camelCase(props.name) %>))
    }
  }

  formChange (newValue) {
    this.setState({
      formValue: newValue
    })
  }

  render () {
    if (this.props.fetching) {
      return (
        <View>
          <Text>Loading...</Text>
        </View>
      )
    }
    return (
      <KeyboardAwareScrollView>
        <ScrollView style={styles.container} testID='entityScrollView'>
          <Form
            ref={c => {
              this.form = c
            }}
            type={this.state.formModel}
            options={this.state.formOptions}
            value={this.state.formValue}
            onChange={this.formChange}
          />
          <TouchableHighlight style={styles.button} onPress={this.submitForm} underlayColor='#99d9f4' testID='submitButton'>
            <Text style={styles.buttonText}>Save</Text>
          </TouchableHighlight>
        </ScrollView>
      </KeyboardAwareScrollView>
    )
  }
}
// convenience methods for customizing the mapping of the entity to/from the form value
const entityToFormValue = (value) => {
  if (!value) {
    return {}
  }
  return {
    id: value.id || null,
    <%_ props.entityConfig.fields.forEach((field, index) => { _%>
    <%= field.fieldName %>: value.<%= field.fieldName %> || null<%=  props.entityConfig.ownerSideRelationships.length || index !== props.entityConfig.fields.length - 1 ? ',' : '' %>
    <%_ }) _%>
    <%_ props.entityConfig.ownerSideRelationships.forEach((relation, index) => { _%>
    <%_ if (props.entityConfig.dto === 'no') { _%>
      <%_ if (relation.relationshipType === 'many-to-many') { _%>
    <%= relation.relationshipNamePlural %>: [].concat(value.<%= relation.relationshipNamePlural %>.map((<%= relation.relationshipName %>) => { return <%= relation.relationshipName %>.id }))<%= index !== props.entityConfig.ownerSideRelationships.length - 1 ? ',' : '' %>
      <%_ } else { _%>
    <%= relation.otherEntityName %>Id: (value.<%= relation.otherEntityName %> && value.<%= relation.otherEntityName %>.id) ? value.<%= relation.otherEntityName %>.id : null<%= index !== props.entityConfig.ownerSideRelationships.length - 1 ? ',' : '' %>
      <%_ } _%>
    <%_ } else if (props.entityConfig.dto === 'mapstruct') { _%>
      <%_ if (relation.relationshipType === 'many-to-many') { _%>
    <%= relation.relationshipNamePlural %>: [].concat(value.<%= relation.relationshipNamePlural %>.map((<%= relation.relationshipName %>) => { return <%= relation.relationshipName %>.id }))<%= index !== props.entityConfig.ownerSideRelationships.length - 1 ? ',' : '' %>
      <%_ } else { _%>
    <%= relation.otherEntityName %>Id: value.<%= relation.otherEntityName %>Id || null<%= index !== props.entityConfig.ownerSideRelationships.length - 1 ? ',' : '' %>
      <%_ } _%>
    <%_ } _%>
    <%_ }) _%>
  }
}
const formValueToEntity = (value) => {
  const entity = {
    id: value.id || null,
    <%_ props.entityConfig.fields.forEach((field, index) => { _%>
    <%= field.fieldName %>: value.<%= field.fieldName %> || null<%=  props.entityConfig.dto === 'mapstruct' && props.entityConfig.ownerSideRelationships.length || index !== props.entityConfig.fields.length - 1 ? ',' : '' %>
    <%_ }) _%>
    <%_ props.entityConfig.ownerSideRelationships.forEach((relation, index) => { _%>
    <%_  if (props.entityConfig.dto === 'mapstruct') { _%>
      <%_ if (relation.relationshipType === 'many-to-many') { _%>
    <%= relation.relationshipNamePlural %>: [].concat(value.<%= relation.relationshipNamePlural %>.map((<%= relation.relationshipName %>) => { return { id: <%= relation.relationshipName %> } }))<%= index !== props.entityConfig.ownerSideRelationships.length - 1 ? ',' : '' %>
      <%_ } else { _%>
    <%= relation.otherEntityName %>Id: value.<%= relation.otherEntityName %>Id || null<%= index !== props.entityConfig.ownerSideRelationships.length - 1 ? ',' : '' %>
      <%_ } _%>
    <%_ } _%>
  <%_ }) _%>
  }
  <%_ props.entityConfig.ownerSideRelationships.forEach((relation, index) => { _%>
    <%_ if (props.entityConfig.dto === 'no') { _%>
      <%_ if (relation.relationshipType === 'many-to-many') { _%>
  entity.<%= relation.relationshipNamePlural %> = [].concat(value.<%= relation.relationshipNamePlural %>.map((<%= relation.relationshipName %>) => { return { id: <%= relation.relationshipName %> } }))
      <%_ } else { _%>
  if (value.<%= relation.otherEntityName %>Id) {
    entity.<%= relation.otherEntityName %> = { id: value.<%= relation.otherEntityName %>Id }
  }
      <%_ } _%>
    <%_ } _%>
  <%_ }) _%>
  return entity
}

const mapStateToProps = (state) => {
  return {
    <%_ props.entityConfig.uniqueOwnerSideRelationships.forEach((relation) => { _%>
    <%= camelCase(relation.otherEntityNamePlural) %>: state.<%= camelCase(relation.otherEntityNamePlural) %>.<%= camelCase(relation.otherEntityNamePlural) %> || [],
    <%_ }) _%>
    <%= camelCase(props.name) %>: state.<%= camelCase(props.pluralName) %>.<%= camelCase(props.name) %>,
    fetching: state.<%= camelCase(props.pluralName) %>.fetchingOne,
    updating: state.<%= camelCase(props.pluralName) %>.updating,
    error: state.<%= camelCase(props.pluralName) %>.errorUpdating
  }
}

const mapDispatchToProps = (dispatch) => {
  return {
    <%_ props.entityConfig.uniqueOwnerSideRelationships.filter(relation => relation.otherEntityName !== camelCase(props.name)).forEach((relation) => { _%>
    getAll<%= pascalCase(relation.otherEntityNamePlural) %>: (options) => dispatch(<%= pascalCase(relation.otherEntityName) %>Actions.<%= camelCase(relation.otherEntityName) %>AllRequest(options)),
    <%_ }) _%>
    get<%= props.name %>: (id) => dispatch(<%= props.name %>Actions.<%= camelCase(props.name) %>Request(id)),
    getAll<%= props.pluralName %>: (options) => dispatch(<%= props.name %>Actions.<%= camelCase(props.name) %>AllRequest(options)),
    update<%= props.name %>: (<%= camelCase(props.name) %>) => dispatch(<%= props.name %>Actions.<%= camelCase(props.name) %>UpdateRequest(<%= camelCase(props.name) %>))
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(<%= props.name %>EntityEditScreen)
