import { call, put } from 'redux-saga/effects'
import { callApi } from '../../../shared/sagas/call-api.saga'
import <%= props.name %>Actions from './<%= props.kebabName %>.reducer'
<%_ if (props.entityContainsLocalDate) { _%>
import { localDateToJsDate } from '../../../shared/util/date-transforms'
<%_ } _%>

export function * get<%= props.name %> (api, action) {
  const { <%= camelCase(props.name) %>Id } = action
  // make the call to the api
  const apiCall = call(api.get<%= props.name %>, <%= camelCase(props.name) %>Id)
  const response = yield call(callApi, apiCall)

  // success?
  if (response.ok) {
    <%_ if (props.entityContainsDate) { _%>
    response.data = mapDateFields(response.data)
    <%_ } _%>
    yield put(<%= props.name %>Actions.<%= camelCase(props.name) %>Success(response.data))
  } else {
    yield put(<%= props.name %>Actions.<%= camelCase(props.name) %>Failure(response.data))
  }
}

export function * get<%= props.pluralName %> (api, action) {
  const { options } = action
  // make the call to the api
  const apiCall = call(api.get<%= props.pluralName %>, options)
  const response = yield call(callApi, apiCall)

  // success?
  if (response.ok) {
    yield put(<%= props.name %>Actions.<%= camelCase(props.name) %>AllSuccess(response.data))
  } else {
    yield put(<%= props.name %>Actions.<%= camelCase(props.name) %>AllFailure(response.data))
  }
}

export function * update<%= props.name %> (api, action) {
  const { <%= camelCase(props.name) %> } = action
  // make the call to the api
  const idIsNotNull = !!<%= camelCase(props.name) %>.id
  const apiCall = call(idIsNotNull ? api.update<%= props.name %> : api.create<%= props.name %>, <%= camelCase(props.name) %>)
  const response = yield call(callApi, apiCall)

  // success?
  if (response.ok) {
    <%_ if (props.entityContainsDate) { _%>
    response.data = mapDateFields(response.data)
    <%_ } _%>
    yield put(<%= props.name %>Actions.<%= camelCase(props.name) %>UpdateSuccess(response.data))
  } else {
    yield put(<%= props.name %>Actions.<%= camelCase(props.name) %>UpdateFailure(response.data))
  }
}

<%_ if (props.searchEngine) { _%>
export function * search<%= props.pluralName %> (api, action) {
  const { query } = action
  // make the call to the api
  const apiCall = call(api.search<%= props.pluralName %>, query)
  const response = yield call(callApi, apiCall)

  // success?
  if (response.ok) {
    yield put(<%= props.name %>Actions.<%= camelCase(props.name) %>SearchSuccess(response.data))
  } else {
    yield put(<%= props.name %>Actions.<%= camelCase(props.name) %>SearchFailure(response.data))
  }
}
<%_ } _%>
export function * delete<%= props.name %> (api, action) {
  const { <%= camelCase(props.name) %>Id } = action
  // make the call to the api
  const apiCall = call(api.delete<%= props.name %>, <%= camelCase(props.name) %>Id)
  const response = yield call(callApi, apiCall)

  // success?
  if (response.ok) {
    yield put(<%= props.name %>Actions.<%= camelCase(props.name) %>DeleteSuccess())
  } else {
    yield put(<%= props.name %>Actions.<%= camelCase(props.name) %>DeleteFailure(response.data))
  }
}
<%_ if (props.entityContainsDate) { _%>
function mapDateFields (data) {
<%_ props.entityConfig.fields.forEach(function (field) { _%>
<%_ if (field.fieldType === 'LocalDate') { _%>
  if (data.<%= field.fieldName %>) {
    data.<%= field.fieldName %> = localDateToJsDate(data.<%= field.fieldName %>)
  }
<%_ } else if (field.fieldType === 'ZonedDateTime' || field.fieldType === 'Instant') { _%>
  if (data.<%= field.fieldName %>) {
    data.<%= field.fieldName %> = new Date(data.<%= field.fieldName %>)
  }
<%_ } _%>
<%_ }) _%>
  return data
}
<%_ } _%>
