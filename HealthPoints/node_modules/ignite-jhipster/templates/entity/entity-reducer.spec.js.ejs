import Actions, { reducer, INITIAL_STATE } from '../../../../../app/modules/entities/<%= props.kebabName %>/<%= props.kebabName %>.reducer'

test('attempt retrieving a single <%= camelCase(props.name) %>', () => {
  const state = reducer(INITIAL_STATE, Actions.<%= camelCase(props.name) %>Request({ id: 1 }))

  expect(state.fetchingOne).toBe(true)
  expect(state.<%= camelCase(props.name) %>).toBe(null)
})

test('attempt retrieving a list of <%= camelCase(props.name) %>', () => {
  const state = reducer(INITIAL_STATE, Actions.<%= camelCase(props.name) %>AllRequest({ id: 1 }))

  expect(state.fetchingAll).toBe(true)
  expect(state.<%= camelCase(props.pluralName) %>).toEqual([])
})

test('attempt updating a <%= camelCase(props.name) %>', () => {
  const state = reducer(INITIAL_STATE, Actions.<%= camelCase(props.name) %>UpdateRequest({ id: 1 }))

  expect(state.updating).toBe(true)
})
<%_ if (props.searchEngine) { _%>
test('attempt searching a <%= camelCase(props.name) %>', () => {
  const state = reducer(INITIAL_STATE, Actions.<%= camelCase(props.name) %>SearchRequest(1))

  expect(state.searching).toBe(true)
})
<%_ } _%>
test('attempt to deleting a <%= camelCase(props.name) %>', () => {
  const state = reducer(INITIAL_STATE, Actions.<%= camelCase(props.name) %>DeleteRequest({ id: 1 }))

  expect(state.deleting).toBe(true)
})

test('success retrieving a <%= camelCase(props.name) %>', () => {
  const state = reducer(INITIAL_STATE, Actions.<%= camelCase(props.name) %>Success({ id: 1 }))

  expect(state.fetchingOne).toBe(false)
  expect(state.errorOne).toBe(null)
  expect(state.<%= camelCase(props.name) %>).toEqual({ id: 1 })
})

test('success retrieving a list of <%= camelCase(props.name) %>', () => {
  const state = reducer(INITIAL_STATE, Actions.<%= camelCase(props.name) %>AllSuccess([{ id: 1 }, { id: 2 }]))

  expect(state.fetchingAll).toBe(false)
  expect(state.errorAll).toBe(null)
  expect(state.<%= camelCase(props.pluralName) %>).toEqual([{ id: 1 }, { id: 2 }])
})

test('success updating a <%= camelCase(props.name) %>', () => {
  const state = reducer(INITIAL_STATE, Actions.<%= camelCase(props.name) %>UpdateSuccess({ id: 1 }))

  expect(state.updating).toBe(false)
  expect(state.errorUpdating).toBe(null)
  expect(state.<%= camelCase(props.name) %>).toEqual({ id: 1 })
})
<%_ if (props.searchEngine) { _%>
test('success searching a <%= camelCase(props.name) %>', () => {
  const state = reducer(INITIAL_STATE, Actions.<%= camelCase(props.name) %>SearchSuccess({ id: 1 }))

  expect(state.searching).toBe(false)
  expect(state.errorSearching).toBe(null)
  expect(state.<%= camelCase(props.pluralName) %>).toEqual({ id: 1 })
})
<%_ } _%>
test('success deleting a <%= camelCase(props.name) %>', () => {
  const state = reducer(INITIAL_STATE, Actions.<%= camelCase(props.name) %>DeleteSuccess())

  expect(state.deleting).toBe(false)
  expect(state.errorDeleting).toBe(null)
  expect(state.<%= camelCase(props.name) %>).toEqual(null)
})

test('failure retrieving a <%= camelCase(props.name) %>', () => {
  const state = reducer(INITIAL_STATE, Actions.<%= camelCase(props.name) %>Failure({ error: 'Not found' }))

  expect(state.fetchingOne).toBe(false)
  expect(state.errorOne).toEqual({ error: 'Not found' })
  expect(state.<%= camelCase(props.name) %>).toEqual(null)
})

test('failure retrieving a list of <%= camelCase(props.name) %>', () => {
  const state = reducer(INITIAL_STATE, Actions.<%= camelCase(props.name) %>AllFailure({ error: 'Not found' }))

  expect(state.fetchingAll).toBe(false)
  expect(state.errorAll).toEqual({ error: 'Not found' })
  expect(state.<%= camelCase(props.pluralName) %>).toEqual([])
})

test('failure updating a <%= camelCase(props.name) %>', () => {
  const state = reducer(INITIAL_STATE, Actions.<%= camelCase(props.name) %>UpdateFailure({ error: 'Not found' }))

  expect(state.updating).toBe(false)
  expect(state.errorUpdating).toEqual({ error: 'Not found' })
  expect(state.<%= camelCase(props.name) %>).toEqual(INITIAL_STATE.<%= camelCase(props.name) %>)
})
<%_ if (props.searchEngine) { _%>
test('failure searching a <%= camelCase(props.name) %>', () => {
  const state = reducer(INITIAL_STATE, Actions.<%= camelCase(props.name) %>SearchFailure({ error: 'Not found' }))

  expect(state.searching).toBe(false)
  expect(state.errorSearching).toEqual({ error: 'Not found' })
  expect(state.<%= camelCase(props.pluralName) %>).toEqual([])
})
<%_ } _%>
test('failure deleting a <%= camelCase(props.name) %>', () => {
  const state = reducer(INITIAL_STATE, Actions.<%= camelCase(props.name) %>DeleteFailure({ error: 'Not found' }))

  expect(state.deleting).toBe(false)
  expect(state.errorDeleting).toEqual({ error: 'Not found' })
  expect(state.<%= camelCase(props.name) %>).toEqual(INITIAL_STATE.<%= camelCase(props.name) %>)
})
